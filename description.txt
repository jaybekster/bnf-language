// http://pegjs.majda.cz/

{
  obj = {};
  function scope(name, val) {
    console.log(name, val)
    if (!val) {
      return obj[name];
    }
    obj[name] = val;

  }

function clearNull(arr) {
    var length = arr.length;
    while (length--) {
      if (Array.isArray(arr[length])) {
        clearNull(arr[length]);
      }
      if (arr[length] === null || Array.isArray(arr[length]) && !arr[length].length) {
        arr.splice(length, 1);
      }
    }
    return arr;
  }
}

start
  = Program:(Begin Title ZnakDiff spaces? Blocks spaces? "Конец программы") { return clearNull(Program); }

Begin "Программа" = "Программа" spaces? {
  return 'Программа';
}

Title "Метки" = "Метки" spaces? {  return 'Метки'; }

Znak = metkaName:[0-9]+[^:] [ \n]* { return metkaName.join(""); }
/metkaName: VariableName [ \n]* { return metkaName; }

ZnakDiff = Znak*

metka = digits":"


OpearationM = [-+*/^];
OpeationsA = [];

Block = spaces? block:string spaces?";" { return block; }
Blocks = block:Block*
string = metka _var:Variable spaces? op:additive { scope(_var, op); return _var + " = " + op; }


additive "additive"
  = left:multiplicative spaces? "+" spaces? right:additive { return left + right; }
  / left:multiplicative spaces? "-" spaces? right:additive { return left - right; }
  / left:multiplicative spaces? "^" spaces? right:additive { return Math.pow(left, right); }
  / multiplicative

multiplicative "multiplicative"
  = left:primary spaces? "*" spaces? right:multiplicative { return left * right; }
  / left:primary spaces? "/" spaces? right:multiplicative { return left / right; }
  / primary

primary "primary"
  = digits:digits { return digits; }
  / name:VariableName { return scope(name) }
  / "(" additive:additive ")" { return additive; }



VariableName "VariableName"
= firstLetter:chars diffs:diff* { return firstLetter + diffs.join("") }

Variable "Variable"
= _var:VariableName spaces? '=' {return _var; }

digits "digits"
= znak:[+-]? chislo:[0-9]+ { return parseInt((znak ? znak : "") + chislo.join(""), 10); }

chars = [а-я]i

diff = [а-я]i
/[0-9]

spaces "Пробелы или отступы" = spaces:[ \n]* { return null; }